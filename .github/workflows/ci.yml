name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch: {}

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONHASHSEED: "42"
  OMP_NUM_THREADS: "1"
  OPENBLAS_NUM_THREADS: "1"
  MKL_NUM_THREADS: "1"

jobs:
  lint:
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: python -m pip install -U pip ruff
      - run: ruff check .

  test:
    name: Unit tests (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    env:
      PYTHONPATH: .
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - run: python -m pip install -U pip
      - run: pip install -e .[dev]
      - run: pytest -q

  smoke:
    name: MNIST smoke run
    needs: test
    runs-on: ubuntu-latest
    env: { PYTHONPATH: . }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11", cache: pip }
      - run: |
          python -m pip install -U pip
          pip install -e .
      - name: Generate S1 scenario (MNIST)
        run: |
          python -m frl.scenarios.scenario_gen \
            -c frl/scenarios/s1_equal_dist_diff_size.yaml \
            -o results/scenarios --preview
      - name: Run FRL (1 round, quick)
        run: |
          python scripts/run_federated.py \
            --dataset mnist \
            --scenario frl/scenarios/s1_equal_dist_diff_size.yaml \
            --aggregator frl \
            --rounds 1 --local-epochs 1 --batch-size 256 --lr 0.1 \
            --log-dir results/logs
      - run: python scripts/make_fig_tables.py --glob "results/logs/*.csv" --outdir results/figures || true
      - uses: actions/upload-artifact@v4
        with: { name: logs-${{ github.run_number }}, path: results/logs, if-no-files-found: warn }
      - uses: actions/upload-artifact@v4
        with: { name: figures-${{ github.run_number }}, path: results/figures, if-no-files-found: warn }

  cifar_smoke:
    name: CIFAR-10 smoke (CPU)
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      PYTHONPATH: .
      TORCH_HOME: ~/.torch  # cache location for datasets/weights
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11", cache: pip }

      # Cache CIFAR-10 download to speed up subsequent runs
      - name: Cache Torch data
        uses: actions/cache@v4
        with:
          path: ~/.torch
          key: cifar-cache-${{ runner.os }}-v1

      - name: Install package + torchvision (CPU)
        run: |
          python -m pip install -U pip
          pip install -e .
          pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

      - name: Generate S2
        run: |
          python -m frl.scenarios.scenario_gen \
            -c frl/scenarios/s2_hetero_dist_diff_size.yaml \
            -o results/scenarios --preview

      - name: CIFAR-10 S2 smoke (1 round)
        run: |
          python scripts/run_federated.py \
            --dataset cifar10 \
            --scenario frl/scenarios/s2_hetero_dist_diff_size.yaml \
            --aggregator frl \
            --rounds 1 --local-epochs 1 --batch-size 256 --lr 0.1 \
            --log-dir results/logs

      - uses: actions/upload-artifact@v4
        with:
          name: cifar-smoke-logs-${{ github.run_number }}
          path: results/logs
          if-no-files-found: warn
